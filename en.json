{
    "lang": "en",
    "data": {
        "FORM": {
            "AddBYOHHost": {
                "Name": "A friendly name to BYOH host.",
                "DirectAddress": "IPv4 address to which DuploCloud will use to communicate with agent installed on your host.",
                "FleetType": "Fleet type represents the type of container orchestrator running your Host.\n1. **Linux Docker/Native:** Select this option if operating system running on your host is Linux.\n2. **Docker Windows:** Select this option if operating system running on your host is Windows\n3. **None:** Select this option no agent/container orchestrator is running on the EC2 host.\n",
                "Username": "Username to login to your host. This is an optional field.",
                "Password": "Password to login to your host. This is an optional field.",
                "PrivateKey": "Private Key to login to your host using SSH. This is again an optional field. User can either specify `Password` or `Private Key`."
            },
            "AddEC2Host": {
                "Name": "Friendly name for host. User provided name will be appended by prefix as \"duploservice-<tenant_name>-\" after host is created.",
                "Zone": "AWS availibility zone to create an EC2 instance.\n1. **Automatic:** Select this option to automatically assign the availbilty zone to EC2 host. DuploCloud will automatically assign a zone with subnet having most availble IPv4 addresses.\n",
                "InstanceType": "Select an instance type that meets your computing, memory, networking, or storage needs. Select type as \"Other\" if you don't see desired option in the dropdown.",
                "InstanceCount": "Desired capacity for the autoscaling group.",
                "minInstanceCount": "Minimum Instance Count. Autoscaling group will make sure that total no of instance will always be greater than or equal to min count.",
                "maxInstanceCount": "Maximum Instance Count. Autoscaling group will make sure that total no of instance will always be less than or equal to max count.",
                "IsClusterAutoscaled": "Check this when you want kubernetes cluster autoscaler to manage this cluster auto scaling.",
                "allocationTags": "Allocation tags is the simplest way to constraint contaieners/pods with hosts/nodes. DuploCloud/Kubernetese orchastrator will make sure containers will run on the hosts having same allocation tags.",
                "diskSize": "EBS volume size in GB. If not specified volume size will be same as defined the AMI.",
                "agentPlatform": "Select container orchestration platform.\n1. **Linux Docker/Native:** Select this option if you want to run docker native services which are Linux based.\n2. **Windows Docker/Native:** Select this option if you want to run docker native services which are Windows based.\n3. **EKS Linux:** Select this options if you want to run services on the Kubernetes Cluster.\n4. **None:** This option has to be selected when EC2 instance is not used for running containers.\n",
                "ImageId": "AMI id for the EC2 instance. AMI should be compatible with the agent platform. Select type as \"Other\" if you don't see desired option in dropdown.",
                "blockEBSOptimization": "Set this to enable block EBS optimization.",
                "enableHibernation": "Hibernation stops your instance and saves the contents of the instance\u2019s RAM to the root volume. You cannot enable hibernation after EC2 host is launch.",
                "metaDataServiceFlag": "Select `Disabled` to turn off access to instance metadata. Otherwise you can set `V1 and V2`, or just `V2`. If you do not specify a value, the default is V1 and V2.",
                "base64": "Base64 encoded user data. On Linux machine you can encode script file using command ```cat <filepath> | base64 -w 0 ```.",
                "tags": "Tags to be added to ec2 instance. Format for adding tags is as below.\n```js\n{\n    \"key\" : \"value\"\n}\n```\n",
                "volumes": "Array of extra block devices in json format as below.\n```js\n[\n    {\n        \"Name\":\"/dev/sdA\", \n        \"VolumeType\":\"Gp2\", \n        \"Size\":\"100\"\n    }\n]\n```\n",
                "nwInterfaces": "Extra network interfaces to be attached to the ec2 host in a JSON format as below.\n```js\n[\n  {\n    \"NetworkInterfaceId\": \"eni-095827b411091db43\",\n    \"DeviceIndex\": 0\n  },\n  {\n    \"NetworkInterfaceId\": \"eni-0df26c4b283cde675\",\n    \"DeviceIndex\": 1\n  }\n] \n```\n"
            },
            "AddIngress": {
                "name": "Name for your ingress object.",
                "ingressClassName": "Select ingress controller name.",
                "dNSPrefix": "Provide the DNS prefix to expose services using Route53 domain.",
                "visibility": "Visibility can be used to manage the accessibility of services exposed by Ingress load belancer.\n*Internal Only*: Services will be accessible within tenant and to other tenants only if allowed by security rules.\n*Public*: Services will be accessible over internet.\n",
                "certificateArn": "Select AWS certificate ARN to expose services over HTTPS.",
                "ingressRules": "Ingress rules specifications as documented [here](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules)\nClick on the `Add Rule` button to add the rules for the kubernetes services created using DuploCloud.\n```\n",
                "ingressAnnotations": "List of Key Value pairs to annotate the Ingress Object. \nAnnotations are used for controlling the behavior of the services exposed by the Ingress. \nEach ingress controller defines the set of annotations which can be used to controll the behavior, for e.g. you can find the documentation for AWS ALB ingress controller [here](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/guide/ingress/annotations/)\n",
                "httpPort": "HTTP Listener Port. If you dont want to exposed your services over HTTP, make it blank.",
                "httpsPort": "HTTPS Listener Port. HTTPS Listener port can be specified only when SSL certificate ARN is specified."
            },
            "AddRDS": {
                "Identifier": "Provide unique identifier for the RDS instance across all tenants.  The cluster identifier is used in determining the cluster's endpoint.",
                "SnapshotId": "Select this when you want to create RDS instance from existing Snapshot.",
                "Engine": "Select Database engine for creating RDS instance.",
                "EngineVersion": "Select database engine version. If not selected latest version will be used while creating database. Select type as 'Other' if you don't see desired option in dropdown list.",
                "Username": "Specify an alphanumeric string that defines the login ID for the master user. You use the master user login to start defining all users, objects, and permissions in a databases of your DB instance. Master Username must start with a letter.",
                "Password": "Specify a string that defines the password for the master user. Master Password must be at least eight characters long.",
                "ClusterIdentifier": "Cluster Identifier",
                "DbSize": "Instance size for RDS. Select type as 'Other' if you don't see desired option in dropdown list.",
                "AllocatedStorage": "Storage allocation for RDS instance in GB.",
                "MinCapacity": "Set the minimum capacity unit for the DB cluster. Each capacity unit is equivalent to a specific compute and memory configuration.",
                "MaxCapacity": "Set the maximum capacity unit for the DB cluster. Each capacity unit is equivalent to a specific compute and memory configuration.",
                "AutoPause": "Specify the amount of time to pass with no database traffic before you scale to zero processing capacity. When database traffic resumes, your Serverless cluster resumes processing capacity and scales to handle the traffic.\\",
                "AutoPauseDuration": "Amount of time the cluster can be idle before scaling to zero",
                "DBParameterGroupName": "Database parameters group name.",
                "ClusterParameterGroupName": "Cluster parameters group name.",
                "EncryptionKey": "Choose to encrypt the given instance.",
                "EnableLogging": "Select this option to enable logging for the RDS instance.",
                "MultiAZ": "Create database in multiple availability zones for high availability."
            },
            "ecsservice": {
                "Name": "The name of your service. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.",
                "vcpus": "Task definition with revision.",
                "Replicas": "ECS makes sure a specified number of replicas run across your cluster.",
                "DnsPrfx": "Prefix which will get added to the base domain registered in the plan for this tenant. If not specified default value will be `<service-name>-<tenant-name>`",
                "HealthCheckGracePeriodSeconds": "The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started. \nThis is only used when your service is configured to use a load balancer. If your service has a load balancer defined and you don't specify a health check grace period value, the default value of 0 is used.\n",
                "OldTaskDefinitionBufferSize": "Old task definitions buffer size. This can be used to limit the size the stale task definitions in buffer. Default value is 10.",
                "CapacityProvider": "Add a capacity provider to the custom capacity provider strategy for the cluster. Add a capacity provider to the custom capacity provider strategy for the cluster. If there are no existing capacity providers, create a new capacity provider from the capacity providers tab on the cluster details screen."
            },
            "IngressRule": {
                "serviceName": "Name of the kubernetes service which Ingress will use as backend to serve the request. User will have to first configure a Loadbalancer/Kubernetes NodePort/Kubernetes ClusterIP for the DuploCloud service. \nYou can find the document [here](https://docs.duplocloud.com/docs/aws/quick-start/step-6-create-a-load-balancer)\n",
                "port": "Port from the kubernetes service that ingress will use as backend port to serve the requests.",
                "host": "If a host is provided (for e.g. example, foo.bar.com), the rules apply to that host.",
                "path": "Specify the path (for e.g. /api /v1/api/) to do a path base routing. If host is specified then both path and host should be match for the incoming request.",
                "pathType": "Each path in an Ingress is required to have a corresponding path type. Paths that do not include an explicit pathType will fail validation. There are three supported path types:\n\nImplementationSpecific: With this path type, matching is up to the IngressClass. Implementations can treat this as a separate pathType or treat it identically to Prefix or Exact path types.\n\n1. *Exact*: Matches the URL path exactly and with case sensitivity.\n\n2. *Prefix*: Matches based on a URL path prefix split by /. Matching is case sensitive and done on a path element by element basis. A path element refers to the list of labels in the path split by the / separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. \n"
            },
            "lbListener": {
                "lbType": "Type of AWS loadbalencer. It supports following two types\n1. **Application**: Use this type when user wants to expose HTTP or HTTPS port using the Loadbalencer.\n2. **Network**: For any other ports use this type.\n",
                "ContainerPort": "Port exposed by the container.",
                "ExternalPort": "Port user want to expose using loadbalencer. It may not be same as to the contaiener port.\n",
                "visibility": "Visibility of the service to be exposed which can be either Internal or Public.\n1 **Internal Only**: When this option is selected service will accessible within the infrastructure created in AWS.\n2. **Public**: When this option is selected, service will be accessible to the internet. \n",
                "HealthCheck": "Helath check URL for this container. This required paramter when Application load balencer is selected. \nIt helps AWS ALB to decide whether service is up and running.\n",
                "BackendProtocol": "Protocol for the service exposed by the container.",
                "BeProtocolVersion": "Protocol version only applicatible when application loadbalencer is selected\n1. **HTTP1**: Send requests to targets using HTTP/1.1. Supported when the request protocol is HTTP/1.1 or HTTP/2.\n2. **HTTP2**: Send requests to targets using HTTP/2. Supported when the request protocol is HTTP/2 or gRPC, but gRPC-specific features are not available.\n3. **gRPC**: Send requests to targets using gRPC. Supported when the request protocol is gRPC.\n",
                "Certificates": "AWS Certificate to be attached to loadbalencer to expose the service over SSL.",
                "TgCount": "Target group count.",
                "HealthyThresholdCount": "The number of consecutive health checks successes required before considering an unhealthy target healthy.",
                "UnHealthyThresholdCount": "The number of consecutive health check failures required before considering a target unhealthy.",
                "HealthCheckTimeoutSeconds": "The amount of time, in seconds, during which no response means a failed health check.",
                "HealthCheckIntervalSeconds": "The approximate amount of time between health checks of an individual target.",
                "HttpSuccessCode": "The HTTP codes to use when checking for a successful response from a target. You can specify multiple values (for example, \"200,202\") or a range of values (for example, \"200-299\").",
                "GrpcSuccessCode": "The gRPC codes to use when checking for a successful response from a target. You can specify multiple values (for example, \"20,25\") or a range of values (for example, \"0-99\"). Only applicable when protocol version is selected as **GRPc**."
            },
            "taskdef": {
                "Name": "Specify a name for your task definition. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.",
                "Image": "Image for your docker container.",
                "memory": "The amount of memory (in MiB) used by the task. It can be expressed as an integer using MiB, for example 1024, or as a string using GB, for example '1GB' or '1 gb'.",
                "vcpus": "The number of CPU units used by the task. It can be expressed as an integer using CPU units, for example 1024, or as a string using vCPUs, for example '1 vCPU' or '1 vcpu'.",
                "Port": "Port mappings allow containers to access ports on the host container instance to send or receive traffic.",
                "Protocol": "Protocol for this port.",
                "environmentvars": "Environment variables to be passed to the container in the JSON format as below.\n```js\n[\n  {\n    \"Name\": \"<env_var_name>\"\n    \"Value\" \"<env_var_value>\"\n  }\n]\n```\n",
                "command": "The command that is passed to the container. This parameter maps to **Cmd** in the Create a container section of the Docker Remote API and the COMMAND parameter to docker run. For more information about the Docker CMD parameter, click[here](https://docs.docker.com/engine/reference/builder/#cmd).\nFollowing is the example value to make you container sleep for debugging.\n```js\n[\n  \"sleep\",\n  \"500000\"\n]\n```\n",
                "healthcheck": "Health check configuration which helps to determine if container is healthy in a JSON format. JSON has following attributes.\n1. **command**: A string array representing the command that the container runs to determine if it is healthy. The string array can start with CMD to execute the command arguments directly, or CMD-SHELL to run the command with the container's default shell. If neither is specified, CMD is used by default.\n2. **interval**: The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.\n3. **timeout**: The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.\n4. **retries**: The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.\n5. **startPeriod**: The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.\nFollowing is the example to perform health check by calling an API\n```js\n{\n  \"command\" : [ \"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\" ]\n  \"interval\": 20,\n  \"timeout\" : 5,\n  \"retries\" : 10,\n  \"startPeriod\" : 20\n}\n```\n",
                "Secret": "This is another way of setting up the environment values from AWS secrets in a JSON format. \n```js\n[\n    {\n        \"Name\": \"<env_var_name>\",\n        \"ValueFrom\": \"<aws_secret_arn>:<key_in_aws_secret>::\"\n    },\n    {\n        \"Name\": \"DB_HOST\",\n        \"ValueFrom\": \"arn:aws:secretsmanager:us-west-2:2432432434343:secret:db-secret:DB_HOST::\"\n    }\n]\n```\n",
                "containerotherconfig": "All other advance properties documented [here](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeregisterTaskDefinition.html) applicable only for the Fargate in a JSON format.\nSample value can look like below.\n```js\n{\n  \"LogConfiguration\": {\n      \"LogDriver\": {\n          \"Value\": \"awslogs\"\n      },\n      \"Options\": {\n          \"awslogs-create-group\": \"true\",\n          \"awslogs-group\": \"/ecs/duploservices-nonprod-api\",\n          \"awslogs-region\": \"us-west-2\",\n          \"awslogs-stream-prefix\": \"ecs\"\n      },\n      \"SecretOptions\": []\n  }\n}\n```\n",
                "volumes": "Volumes which can be mounted within container as documented [here](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#volumes) in a json format.\nSample Value with all the possible options can look like as below.\n```js\n[ \n  { \n    \"dockerVolumeConfiguration\": { \n        \"autoprovision\": boolean,\n        \"driver\": \"string\",\n        \"driverOpts\": { \n          \"string\" : \"string\" \n        },\n        \"labels\": { \n          \"string\" : \"string\" \n        },\n        \"scope\": \"string\"\n    },\n    \"efsVolumeConfiguration\": { \n        \"authorizationConfig\": { \n          \"accessPointId\": \"string\",\n          \"iam\": \"string\"\n        },\n        \"fileSystemId\": \"string\",\n        \"rootDirectory\": \"string\",\n        \"transitEncryption\": \"string\",\n        \"transitEncryptionPort\": number\n    },\n    \"fsxWindowsFileServerVolumeConfiguration\": { \n        \"authorizationConfig\": { \n          \"credentialsParameter\": \"string\",\n          \"domain\": \"string\"\n        },\n        \"fileSystemId\": \"string\",\n        \"rootDirectory\": \"string\"\n    },\n    \"host\": { \n        \"sourcePath\": \"string\"\n    },\n    \"name\": \"string\"\n  }\n]\n```\n"
            }
        }
    }
}