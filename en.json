{
    "lang": "en",
    "data": {
        "FORM": {
            "AddEC2Host": {
                "Name": "Friendly name for host. User provided name will be appended by prefix as \"duploservice-<tenant_name>-\" after host is created.",
                "InstanceType": "Instance type for the host. Select type as \"Other\" if you don't see desired option in the dropdown.",
                "InstanceCount": "Desired capacity for the autoscaling group.",
                "minInstanceCount": "Minimum Instance Count. Autoscaling group will make sure that total no of instance will always be greater than or equal to min count.",
                "maxInstanceCount": "Maximum Instance Count. Autoscaling group will make sure that total no of instance will always be less than or equal to max count.",
                "IsClusterAutoscaled": "Check this when you want kubernetes cluster autoscaler to manage this cluster auto scaling.",
                "allocationTags": "Allocation tags for the Host. Allocation tags can be used to distribute the services across hosts.",
                "agentPlatform": "Select container orchestration platform.\n1. **Linux Docker/Native:** Select this option if you want to run docker native services which are Linux based.\n2. **Windows Docker/Native:** Select this option if you want to run docker native services which are Windows based.\n3. **EKS Linux:** Select this options if you want to run services on the Kubenetes Cluster.\n4. **None:** This option has to be selected when EC2 instance is not used for running containers.\n",
                "ImageId": "AMI id for the EC2 instance. AMI should be compatible with the agent platform. Select type as \"Other\" if you don't see desired option in dropdown.",
                "blockEBSOptimization": "Set this to enable block EBS optimization.",
                "enableHibernation": "Set this to enable hibernation as an additional stop behavior.",
                "base64": "Base64 encoded user data. On Linux machine you can encode script file using command ```cat <falepath> | base64 -w 0 ```.",
                "tags": "Tags to be added to ec2 instance. Format for adding tags is as below.\n```js\n{\n    \"key\" : \"value\"\n}\n```\n",
                "volumes": "Array of extra block devices in json format as below.\n```js\n[\n    {\n        \"Name\":\"/dev/sdA\", \n        \"VolumeType\":\"Gp2\", \n        \"Size\":\"100\"\n    }\n]\n```\n",
                "nwInterfaces": "Extra network interfaces to be attached to the ec2 host in a JSON format as below.\n```js\n[\n  {\n    \"NetworkInterfaceId\": \"eni-095827b411091db43\",\n    \"DeviceIndex\": 0\n  },\n  {\n    \"NetworkInterfaceId\": \"eni-0df26c4b283cde675\",\n    \"DeviceIndex\": 1\n  }\n] \n```\n"
            },
            "AddRDS": {
                "Identifier": "Provide unique identifier for the RDS instance across all tenants.  The cluster identifier is used in determining the cluster's endpoint.",
                "SnapshotId": "Select this when you want to create RDS instance from existing Snapshot.",
                "Engine": "Select Database engine for creating RDS instance.",
                "EngineVersion": "Select database engine version. If not selected latest version will be used while creating database. Select type as 'Other' if you don't see desired option in dropdown list.",
                "Username": "Specify an alphanumeric string that defines the login ID for the master user. You use the master user login to start defining all users, objects, and permissions in a databases of your DB instance. Master Username must start with a letter.",
                "Password": "Specify a string that defines the password for the master user. Master Password must be at least eight characters long.",
                "ClusterIdentifier": "Cluster Identifier",
                "DbSize": "Instance size for RDS. Select type as 'Other' if you don't see desired option in dropdown list.",
                "AllocatedStorage": "Storage allocation for RDS instance in GB.",
                "MinCapacity": "Set the minimum capacity unit for the DB cluster. Each capacity unit is equivalent to a specific compute and memory configuration.",
                "MaxCapacity": "Set the maximum capacity unit for the DB cluster. Each capacity unit is equivalent to a specific compute and memory configuration.",
                "AutoPause": "Specify the amount of time to pass with no database traffic before you scale to zero processing capacity. When database traffic resumes, your Serverless cluster resumes processing capacity and scales to handle the traffic.\\",
                "AutoPauseDuration": "Amount of time the cluster can be idle before scaling to zero",
                "DBParameterGroupName": "Database parameters group name.",
                "ClusterParameterGroupName": "Cluster parameters group name.",
                "EncryptionKey": "Choose to encrypt the given instance.",
                "EnableLogging": "Select this option to enable logging for the RDS instance.",
                "MultiAZ": "Create database in multiple availability zones for high availability."
            },
            "taskdef": {
                "Name": "Specify a name for your task definition. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.",
                "Image": "Image for your docker container.",
                "memory": "The amount of memory (in MiB) used by the task. It can be expressed as an integer using MiB, for example 1024, or as a string using GB, for example '1GB' or '1 gb'.",
                "vcpus": "The number of CPU units used by the task. It can be expressed as an integer using CPU units, for example 1024, or as a string using vCPUs, for example '1 vCPU' or '1 vcpu'.",
                "Port": "Port mappings allow containers to access ports on the host container instance to send or receive traffic.",
                "Protocol": "Protocol for this port.",
                "environmentvars": "Environment variables to be passed to the container in the JSON format as below.\n[\n  {\n    \"Name\": \"<env_var_name>\"\n    \"Value\" \"<env_var_value>\"\n  }\n]\n",
                "command": "The command that is passed to the container. This parameter maps to **Cmd** in the Create a container section of the Docker Remote API and the COMMAND parameter to docker run. For more information about the Docker CMD parameter, click[here](https://docs.docker.com/engine/reference/builder/#cmd).\nFollowing is the example value to make you container sleep for debuging.\n[\n  \"sleep\",\n  \"500000\"\n]\n",
                "healthcheck": "Health check configuration which helps to determine if container is healthy in a JSON format. JSON has following attributes.\n1. **command**: A string array representing the command that the container runs to determine if it is healthy. The string array can start with CMD to execute the command arguments directly, or CMD-SHELL to run the command with the container's default shell. If neither is specified, CMD is used by default.\n2. **interval**: The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.\n3. **timeout**: The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5 seconds.\n4. **retries**: The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is three retries.\n5. **startPeriod**: The optional grace period within which to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You may specify between 0 and 300 seconds. The startPeriod is disabled by default.\nFollowing is the example to perform health check by calling an API\n{\n  \"command\" : [ \"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\" ]\n  \"interval\": 20,\n  \"timeout\" : 5,\n  \"retries\" : 10,\n  \"startPeriod\" : 20\n}\n",
                "Secret": "This is another way of setting up the environment values from AWS secrets in a JSON format. \n[\n    {\n        \"Name\": \"<env_var_name>\",\n        \"ValueFrom\": \"<aws_secret_arn>:<key_in_aws_secret>::\"\n    },\n    {\n        \"Name\": \"DB_HOST\",\n        \"ValueFrom\": \"arn:aws:secretsmanager:us-west-2:2432432434343:secret:db-secret:DB_HOST::\"\n    }\n]\n",
                "containerotherconfig": "All other advance properties documented [here](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeregisterTaskDefinition.html) applicable only for the Fargate in a JSON format.\nSample value can look like below.\n{\n  \"LogConfiguration\": {\n      \"LogDriver\": {\n          \"Value\": \"awslogs\"\n      },\n      \"Options\": {\n          \"awslogs-create-group\": \"true\",\n          \"awslogs-group\": \"/ecs/duploservices-nonprod-api\",\n          \"awslogs-region\": \"us-west-2\",\n          \"awslogs-stream-prefix\": \"ecs\"\n      },\n      \"SecretOptions\": []\n  }\n}\n",
                "volumes": "Volumes which can be mounted within container as documented [here](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#volumes) in a json format.\nSample Value with all the possible options can look like as below\n[ \n    { \n      \"dockerVolumeConfiguration\": { \n          \"autoprovision\": boolean,\n          \"driver\": \"string\",\n          \"driverOpts\": { \n            \"string\" : \"string\" \n          },\n          \"labels\": { \n            \"string\" : \"string\" \n          },\n          \"scope\": \"string\"\n      },\n      \"efsVolumeConfiguration\": { \n          \"authorizationConfig\": { \n            \"accessPointId\": \"string\",\n            \"iam\": \"string\"\n          },\n          \"fileSystemId\": \"string\",\n          \"rootDirectory\": \"string\",\n          \"transitEncryption\": \"string\",\n          \"transitEncryptionPort\": number\n      },\n      \"fsxWindowsFileServerVolumeConfiguration\": { \n          \"authorizationConfig\": { \n            \"credentialsParameter\": \"string\",\n            \"domain\": \"string\"\n          },\n          \"fileSystemId\": \"string\",\n          \"rootDirectory\": \"string\"\n      },\n      \"host\": { \n          \"sourcePath\": \"string\"\n      },\n      \"name\": \"string\"\n    }\n]"
            }
        }
    }
}